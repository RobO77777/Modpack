
[Castle]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 56
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 37
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:cold, #structure_gel:snowy, !#structure_gel:mountain, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.42

["Desert Temple"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 32
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 21
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:desert"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.6

["Desert Tomb"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 29
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 19
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:desert"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.65

["Druid Circle"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 36
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 24
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, !#structure_gel:wooded, !#structure_gel:mountain, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.4

["Dungeon Variant"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 16
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 10
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = false
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = ""
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.8

["Elders Temple"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 29
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 19
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 1.0

["Fishing Ship"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 48
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 32
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.68

["Flying Dutchman"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 67
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 44
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.4

["Hay Storage"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 24
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 16
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:savanna"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.75

["Ice Pit"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 35
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 23
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:snowy, #structure_gel:frozen, !#structure_gel:mountain, !#structure_gel:river, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.7

["Jungle Monument"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 30
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 20
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:jungle, !#structure_gel:bamboo_jungle"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.65

["Large Dungeon"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 39
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 26
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, #structure_gel:cold, !#structure_gel:mountain, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.35

["Miners House"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 24
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 16
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:badlands, minecraft:badlands_plateau"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.8

["Monster Maze"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 34
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 22
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:spooky, #structure_gel:pumpkin, !#structure_gel:sandy ,!#structure_gel:mountain"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.5

["Mushroom House"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 15
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 10
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "minecraft:mushroom_fields, minecraft:mushroom_field_shore"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.75

["Pillager Camp"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 49
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 32
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, !#structure_gel:mountain, !#structure_gel:wooded, !#structure_gel:river, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.35

["Pirate Ship"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 65
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 43
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.49

["Ruined Building"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 27
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 18
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, !#structure_gel:river, !#structure_gel:beach, !#structure_gel:mountain"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.45

["Sunken Shrine"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 32
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 21
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:ocean"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.55

[Stables]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 43
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 28
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, !#structure_gel:mountain, !#structure_gel:wooded, !#structure_gel:beach"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.57

["Tall Witch Hut"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 18
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 12
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:swamp"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.6

["Tower of the Undead"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 37
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 24
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:neutral_temp, #structure_gel:savanna, #structure_gel:swamp, !#structure_gel:mountain"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.35

["Tree House"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 31
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 20
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#forge:jungle"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.4

["Watch Tower"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 33
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 22
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:cold, #structure_gel:snowy"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.35

["Witch Tower"]
	#The average distance between structures of this type, measured in chunks.
	#Range: > 1
	spacing = 25
	#What dimensions should this structure be placed in. Type "all" to allow all dimensions
	valid_dimensions = "minecraft:overworld"
	#A random offset applied to spacing. Values closer to 0 produce a grid effect while values closer to spacing are more random.
	#Range: > 0
	offset = 16
	#How the biomes list should be used. true = whitelist, false = blacklist.
	is_whitelist = true
	#A filter for which biomes this structure should generate in. Works with the biome dictionary (#overworld) and "not" statements (!plains). These can be combined (!#nether). Operates in the order presented. So "#forest, !flower_forest" will add all forests and then remove the flower forest.
	biomes = "#structure_gel:spruce_forest, #structure_gel:large_spruce_forest"
	#Percent chance of generating in an allowed chunk.
	#Range: 0.0 ~ 1.0
	probability = 0.5

